import numpy as np

#‚Ññ1 –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º–∞ 
def func(x):
    return 0.5 * x + 0.2 * x ** 2 - 0.1 * x ** 3

def df(x):
    return 0.5 + 0.4*x - 0.3 * (x ** 2)

n = 0.01
N = 200
x = -4
coord_x = np.arange(-5.0, 5.0, 0.1) # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—Å–∏ –∞–±—Å—Ü–∏—Å—Å
coord_y = func(coord_x) # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—Å–∏ –æ—Ä–¥–∏–Ω–∞—Ç (–∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏)

for i in range(N+1):
    x = x - n * df(x)



#‚Ññ2
def func(x):
    return 0.1 * x**2 - np.sin(x) + 5.

# —Ñ—É–Ω–∫—Ü–∏—è, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ x
def s(x):
    return np.array([np.ones_like(x), x, x**2, x**3]).T

# —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–µ–ª–∏ a(x) = w0 + w1*x + w2*x^2 + w3*x^3
def predict(x, w):
    return s(x) @ w

# –¥–∞–Ω–Ω—ã–µ
coord_x = np.arange(-5.0, 5.0, 0.1)
coord_y = func(coord_x)
n_points = len(coord_x)

# –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
w = np.array([0., 0., 0., 0.])
eta = np.array([0.1, 0.01, 0.001, 0.0001])  # —à–∞–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
N = 200  # —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π

# –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫
for i in range(N):
    # –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    y_pred = predict(coord_x, w)
    # –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É w0..w3
    gradient = (2 / n_points) * s(coord_x).T @ (y_pred - coord_y)
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —à–∞–≥–æ–º
    w = w - eta * gradient

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º w –∫–∞–∫ —Å–ø–∏—Å–æ–∫
w = w.tolist()

# –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ Q
y_pred_final = predict(coord_x, np.array(w))
Q = np.mean((y_pred_final - coord_y)**2)

print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã w:", w)
print("–°—Ä–µ–¥–Ω–∏–π —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ Q:", Q)



#‚Ññ3
np.random.seed(0)

# –∏—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å—é a(x)
def func(x):
    return 0.5 * x**2 - 0.1 * 1/np.exp(-x) + 0.5 * np.cos(2*x) - 2.

def L(w: np.array, x: np.array, y: np.array) -> np.array:
    """
    L_i(w)—Ñ-—Ü–∏—è –ø–æ—Ç–µ—Ä—å (–æ–Ω–∞ –∂–µ MSE) 
    –æ–Ω–∞ –∂–µ loses = (y_pred - y_train) ** 2
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä [w[0]., ... w[n].] —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π –∏     —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–æ–∫
    """
    return (w @ x - y)**2

def d_L(w: np.array, x: np.array, y: np.array) -> np.array:
    """
    dL_i(w)/dw -> –≥—Ä–∞–¥–∏–µ–Ω—Ç
    –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è L_i —Ñ-—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    """
    return 2*(w @ x - y) * x.T

coord_x = np.arange(-5.0, 5.0, 0.1) # –∑–Ω–∞—á. –ø–æ –æ—Å–∏ –∞–±—Å—Ü–∏—Å—Å [-5; 5] —Å —à–∞–≥–æ–º 0.1
coord_y = func(coord_x) # –∑–Ω–∞—á. —Ñ-—Ü–∏–∏ –ø–æ –æ—Å–∏ –æ—Ä–¥–∏–Ω–∞—Ç

X_i = np.array([[1, x, x**2, np.cos(2*x), np.sin(2*x)] for x in coord_x])

sz = len(coord_x)	# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ—á–µ–∫)

eta = np.array([0.01, 0.001, 0.0001, 0.01, 0.01]) # —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è Œ∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ w0, w1, w2, w3, w4

N = 500 # —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SGD
lm = 0.02 # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ª—è–º–±–¥–∞ Œª –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ

# 1. –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ w –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
w = np.array([0., 0., 0., 0., 0.])

# 2. –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞(—Å—Ä–µ–¥–Ω–µ–≥–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞) 
# Q(w) = 1/sz * sum(L_i(w))
Qe = 1/sz * np.sum((X_i @ w.T - coord_y)**2) 

# 3. —Ü–∏–∫–ª sgd
for i in range(N):
    # 4. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–±–∞–ª—é–¥–µ–Ω–∏–π
    k = np.random.randint(sz-1)
    x_k = X_i[k]
    y_k = coord_y[k]

    # 5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ-—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    eps_k = L(w, x_k, y_k)
    dL_k = d_L(w, x_k, y_k)

    # 6. –®–∞–≥ –ø—Å–µ–≤–¥–æ–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ w)
    w = w - eta * dL_k

    # 7. –ü–µ—Ä–µ—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    # Q = Œª * eps_k + (1-Œª)*Q 
    # –≥–¥–µ ùúÄ_k = L_k(w) - —Ñ-—Ü–∏—è –ø–æ—Ç–µ—Ä—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    Qe = lm * eps_k + (1-lm) * Qe

# Li = (X_i @ w.T - coord_y) ** 2
Li = sum((L(w,x, y) for x,y in zip(X_i, coord_y)))

# Q(a,X_i) = 1/sz * sum(L_i(w))
Q = 1/sz * np.sum(Li)



#‚Ññ4
# –∏—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å—é a(x)
def func(x):
    return 0.5 * x + 0.2 * x ** 2 - 0.05 * x ** 3 + 0.2 * np.sin(4 * x) - 2.5

def L(w, X, y):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –¥–ª—è –±–∞—Ç—á–∞"""
    y_pred = X @ w      # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    return np.mean((y_pred - y)**2)  # —Å—Ä–µ–¥–Ω—è—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞

def d_L(w, X, y):
    """–ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –±–∞—Ç—á—É"""
    y_pred = X @ w
    # —Ñ–æ—Ä–º—É–ª–∞ ‚àá = 2/m * X^T (y_pred - y)
    return (2 / len(y)) * X.T @ (y_pred - y)

coord_x = np.arange(-4.0, 6.0, 0.1) # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—Å–∏ –∞–±—Å—Ü–∏—Å—Å [-4; 6] —Å —à–∞–≥–æ–º 0.1
coord_y = func(coord_x) # –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—Å–∏ –æ—Ä–¥–∏–Ω–∞—Ç

X_i = np.array([[1, x, x**2, x**3]for x in coord_x])

sz = len(coord_x)	# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ—á–µ–∫)
eta = np.array([0.1, 0.01, 0.001, 0.0001]) # —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ w0, w1, w2, w3
w = np.array([0., 0., 0., 0.]) # –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
N = 500 # —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SGD
lm = 0.02 # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ª—è–º–±–¥–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
batch_size = 50 # —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏-–±–∞—Ç—á–∞ (–≤–µ–ª–∏—á–∏–Ω–∞ K = 50)
# 2. –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞(—Å—Ä–µ–¥–Ω–µ–≥–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞) 
# Q(w) = 1/sz * sum(L_i(w))
Qe = 1/sz * np.sum((X_i @ w.T - coord_y)**2) 
np.random.seed(0) # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

for i in range(N):
    k = np.random.randint(0, sz - batch_size)
    x_k = X_i[k : k + batch_size]
    y_k = coord_y[k : k + batch_size]

    eps_k = L(w, x_k, y_k)      # –æ—à–∏–±–∫–∞ –Ω–∞ –±–∞—Ç—á–µ
    dL_k = d_L(w, x_k, y_k)     # –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞ –±–∞—Ç—á–µ

    w = w - eta * dL_k          # —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è

    Qe = lm * eps_k + (1-lm) * Qe  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
Li = sum((L(w, x, y) for x,y in zip(X_i, coord_y)))
Q = 1/sz * np.sum(Li)



#‚Ññ5
# –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å
def loss(w, x, y):
    M = np.dot(w, x) * y
    return np.log2(1 + np.exp(-M))

# –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –≤–µ–∫—Ç–æ—Ä—É w
def df(w, x, y):
    M = np.dot(w, x) * y
    return -(np.exp(-M) * x.T * y) / ((1 + np.exp(-M)) * np.log(2))

data_x = [(3.0, 4.9), (2.7, 3.9), (3.0, 5.5), (2.6, 4.0), (2.9, 4.3), (3.1, 5.1), (2.2, 4.5), (2.3, 3.3), (2.7, 5.1), (3.3, 5.7), (2.8, 5.1), (2.8, 4.9), (2.5, 4.5), (2.8, 4.7), (3.2, 4.7), (3.2, 5.7), (2.8, 6.1), (3.6, 6.1), (2.8, 4.8), (2.9, 4.5), (3.1, 4.9), (2.3, 4.4), (3.3, 6.0), (2.6, 5.6), (3.0, 4.4), (2.9, 4.7), (2.8, 4.0), (2.5, 5.8), (2.4, 3.3), (2.8, 6.7), (3.0, 5.1), (2.3, 4.0), (3.1, 5.5), (2.8, 4.8), (2.7, 5.1), (2.5, 4.0), (3.1, 4.4), (3.8, 6.7), (3.1, 5.6), (3.1, 4.7), (3.0, 5.8), (3.0, 5.2), (3.0, 4.5), (2.7, 4.9), (3.0, 6.6), (2.9, 4.6), (3.0, 4.6), (2.6, 3.5), (2.7, 5.1), (2.5, 5.0), (2.0, 3.5), (3.2, 5.9), (2.5, 5.0), (3.4, 5.6), (3.4, 4.5), (3.2, 5.3), (2.2, 4.0), (2.2, 5.0), (3.3, 4.7), (2.7, 4.1), (2.4, 3.7), (3.0, 4.2), (3.2, 6.0), (3.0, 4.2), (3.0, 4.5), (2.7, 4.2), (2.5, 3.0), (2.8, 4.6), (2.9, 4.2), (3.1, 5.4), (2.5, 4.9), (3.2, 5.1), (2.8, 4.5), (2.8, 5.6), (3.4, 5.4), (2.7, 3.9), (3.0, 6.1), (3.0, 5.8), (3.0, 4.1), (2.5, 3.9), (2.4, 3.8), (2.6, 4.4), (2.9, 3.6), (3.3, 5.7), (2.9, 5.6), (3.0, 5.2), (3.0, 4.8), (2.7, 5.3), (2.8, 4.1), (2.8, 5.6), (3.2, 4.5), (3.0, 5.9), (2.9, 4.3), (2.6, 6.9), (2.8, 5.1), (2.9, 6.3), (3.2, 4.8), (3.0, 5.5), (3.0, 5.0), (3.8, 6.4)]
data_y = [1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1]

x_train = np.array([[1, x[0], x[1]] for x in data_x])
y_train = np.array(data_y)

n_train = len(x_train)  # —Ä–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏
w = [0.0, 0.0, 0.0]  # –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
nt = np.array([0.5, 0.01, 0.01])   # —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ w0, w1, w2
lm = 0.01  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ª—è–º–±–¥–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
N = 1000  # —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞ SGD

Qe = 1/n_train * np.sum([loss(w, x, y) for x, y in zip(x_train, y_train)]) # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞
np.random.seed(0) # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

# –∑–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É
for i in range (N):
    k = np.random.randint(0, n_train-1) # n_train - —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ (–º–∞—Å—Å–∏–≤–∞ x_train)
    k_x = x_train[k]
    k_y = y_train[k]
    
    eps_k = loss(w, k_x, k_y)
    dl_k = df(w, k_x, k_y)
    
    w = w - nt * dl_k
    
    Qe = lm * eps_k + (1 - lm) * Qe

    
M = (x_train @ w) * y_train
Q = np.mean(M < 0)

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç
w = list(w)  



#‚Ññ6
def loss(w, x, y):
    M = np.dot(w, x) * y
    return np.exp(-M)

# –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –≤–µ–∫—Ç–æ—Ä—É w
def df(w, x, y):
    M = np.dot(w, x) * y
    return -np.exp(-M) * x.T * y

data_x = [(5.8, 1.2), (5.6, 1.5), (6.5, 1.5), (6.1, 1.3), (6.4, 1.3), (7.7, 2.0), (6.0, 1.8), (5.6, 1.3), (6.0, 1.6), (5.8, 1.9), (5.7, 2.0), (6.3, 1.5), (6.2, 1.8), (7.7, 2.3), (5.8, 1.2), (6.3, 1.8), (6.0, 1.0), (6.2, 1.3), (5.7, 1.3), (6.3, 1.9), (6.7, 2.5), (5.5, 1.2), (4.9, 1.0), (6.1, 1.4), (6.0, 1.6), (7.2, 2.5), (7.3, 1.8), (6.6, 1.4), (5.6, 2.0), (5.5, 1.0), (6.4, 2.2), (5.6, 1.3), (6.6, 1.3), (6.9, 2.1), (6.8, 2.1), (5.7, 1.3), (7.0, 1.4), (6.1, 1.4), (6.1, 1.8), (6.7, 1.7), (6.0, 1.5), (6.5, 1.8), (6.4, 1.5), (6.9, 1.5), (5.6, 1.3), (6.7, 1.4), (5.8, 1.9), (6.3, 1.3), (6.7, 2.1), (6.2, 2.3), (6.3, 2.4), (6.7, 1.8), (6.4, 2.3), (6.2, 1.5), (6.1, 1.4), (7.1, 2.1), (5.7, 1.0), (6.8, 1.4), (6.8, 2.3), (5.1, 1.1), (4.9, 1.7), (5.9, 1.8), (7.4, 1.9), (6.5, 2.0), (6.7, 1.5), (6.5, 2.0), (5.8, 1.0), (6.4, 2.1), (7.6, 2.1), (5.8, 2.4), (7.7, 2.2), (6.3, 1.5), (5.0, 1.0), (6.3, 1.6), (7.7, 2.3), (6.4, 1.9), (6.5, 2.2), (5.7, 1.2), (6.9, 2.3), (5.7, 1.3), (6.1, 1.2), (5.4, 1.5), (5.2, 1.4), (6.7, 2.3), (7.9, 2.0), (5.6, 1.1), (7.2, 1.8), (5.5, 1.3), (7.2, 1.6), (6.3, 2.5), (6.3, 1.8), (6.7, 2.4), (5.0, 1.0), (6.4, 1.8), (6.9, 2.3), (5.5, 1.3), (5.5, 1.1), (5.9, 1.5), (6.0, 1.5), (5.9, 1.8)]
data_y = [-1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1]

x_train = np.array([[1, x[0], x[1]] for x in data_x])
y_train = np.array(data_y)

n_train = len(x_train)  # —Ä–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏
w = np.array([0.0, 0.0, 0.0])  # –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
nt = np.array([0.5, 0.01, 0.01])  # —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
lm = 0.01  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
N = 500  # —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
batch_size = 10  # —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏-–±–∞—Ç—á–∞

# –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞
Qe = np.mean([loss(w, x, y) for x, y in zip(x_train, y_train)])

np.random.seed(0)

# SGD
for i in range(N):
    k = np.random.randint(0, n_train - batch_size - 1)
    x_k = x_train[k : k + batch_size]
    y_k = y_train[k : k + batch_size]

    # —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –±–∞—Ç—á—É
    eps_k = np.mean([loss(w, x, y) for x, y in zip(x_k, y_k)])
    dL_k = np.mean([df(w, x, y) for x, y in zip(x_k, y_k)], axis=0)

    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
    w = w - nt * dL_k

    # —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –æ—à–∏–±–∫–∏
    Qe = lm * eps_k + (1 - lm) * Qe

# —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
M = (x_train @ w) * y_train
Q = np.mean(M < 0)

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç
w = list(w)










